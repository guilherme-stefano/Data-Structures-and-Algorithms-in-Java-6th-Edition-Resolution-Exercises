package P129;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Random;

import P128.WriteSentenceMultiple;

public class BirthDayParadox {
	
	public static void main(String[] args) {
		try {
			int[] birthDayParadoxTests = {5,10,15,20,25,100};
			BirthDayParadox paradox = new BirthDayParadox();
			
			for(int numberPeople : birthDayParadoxTests) {
				LocalDate[] birthDays = paradox.GenerateBirthDays(numberPeople);
				int matches = paradox.NumberMatches(birthDays);
				
				System.out.println("For " + numberPeople + " people the number of same birthDays was " + matches );
			}
		}catch(Exception e) {
			e.printStackTrace();
		}

	}
	
	public LocalDate[] GenerateBirthDays(int numberPeople) throws ParseException {
		LocalDate[] birthDays = new LocalDate[numberPeople];
		
		for(int i = 0; i<numberPeople; i++) {
			birthDays[i] = GenerateBirthDay();
		}
		return birthDays;
	}

	public int NumberMatches(LocalDate[] birthDays) {
		int equals = 0;
		
		for(int i = 0; i<birthDays.length; i++) {
			LocalDate date = birthDays[i];
			for(int j = 0; j<birthDays.length; j++) {
				LocalDate dateToCompare = birthDays[j];
				if(i!=j && (date.getDayOfMonth() == dateToCompare.getDayOfMonth()) && (date.getMonth() == date.getMonth())) {
					equals++;
				}
			}
		}
		return equals;
	}
	
	public LocalDate GenerateBirthDay() throws ParseException {
		Random random = new Random();
		int rangeYear = 2010 - 1950 + 1;
		int year =  random.nextInt(rangeYear) + 1950;
		int rangeMounth = 12 - 1 + 1;
		int mounth =  random.nextInt(rangeMounth) + 1;
		int lastDay = 
				mounth == 2 ? 28 : 
				  ((mounth == 1 || 
					mounth == 3 || 
					mounth == 5 ||
					mounth == 7 || 
					mounth == 8 ||
					mounth == 12) 
				? 31 : 30);
		int rangeday = lastDay - 1 + 1;
		int day = random.nextInt(rangeday) + 1;
		DateTimeFormatter df = DateTimeFormatter.ofPattern("yyyy-mm-dd");
		String date_string = year + "-" + mounth  + "-" + day ;
		LocalDate birthDay = LocalDate.parse(date_string, df);    
		return birthDay;
	}

}

